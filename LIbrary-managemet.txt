create database library_management;

create table branch(
branch_id   VARCHAR(10) PRIMARY KEY,
manager_id  VARCHAR(10),
branch_address VARCHAR(30),
contact_no VARCHAR(15)
);

create table Employees(
emp_id  VARCHAR(10) PRIMARY KEY,
emp_name  VARCHAR(30) ,
position  VARCHAR(30),
salary  DECIMAL(10,2),
branch_id   VARCHAR(10),
FOREIGN KEY (branch_id ) REFERENCES branch(branch_id)
);

create table members(
member_id VARCHAR(10) PRIMARY KEY,
member_name VARCHAR(30),
member_address VARCHAR(30),
reg_date DATE
);

create  table books(
isbn VARCHAR(50) PRIMARY KEY,
book_title VARCHAR(80),
category VARCHAR(30),
rental_price DECIMAL(10,2),
status VARCHAR(10),
author VARCHAR(30),
publisher VARCHAR(30)
);

create table  issued_status(
issued_id VARCHAR(10) PRIMARY KEY,
issued_member_id  VARCHAR(30),
issued_book_name  VARCHAR(80),
issued_date DATE,
issued_book_isbn VARCHAR(20),
issued_emp_id  VARCHAR(10),
FOREIGN KEY(issued_member_id) REFERENCES members (member_id),
FOREIGN KEY(issued_emp_id) REFERENCES employees(emp_id),
FOREIGN KEY(issued_book_isbn) REFERENCES books(isbn)
);

create table return_status(
return_id VARCHAR(10) PRIMARY KEY,
issued_id VARCHAR(30),
return_book_name VARCHAR(30), 
return_date DATE,
return_book_isbn VARCHAR(50),
FOREIGN KEY(return_book_isbn) REFERENCES books(isbn)
) ;

#insering the values in tables with the help of workbench

#1) Update an Existing Member's Address
UPDATE members
SET member_address ='125 Main St'
where member_id='C101';

#2) Delete a Record from the Issued Status Table 
-- Objective: Delete the record with issued_id = 'IS121' from the issued_status table.

Delete from issued_status
where issued_id='IS121';

#3)Retrieve All Books Issued by a Specific Employee -- Objective: Select all books issued by the employee with emp_id = 'E101'

Select * from issued_status 
where issued_emp_id='E101';

#4) List Members Who Have Issued More Than One Book
Select iss.issued_emp_id,e.emp_name
from issued_status as iss
join employees as  e
on e.emp_id=iss.issued_emp_id
GROUP BY 
iss.issued_emp_id, e.emp_name
having count(iss.issued_id)>1;

#5)Create Summary Tables: each book and total book_issued_cnt**

create table book_Cents
as
Select isbn,book_title,count(issued_id)
from books
join issued_status
on issued_status.issued_book_isbn=books.isbn
group by book_title,isbn;

Select * from book_Cents;

#6) Find Total Rental Income by Category:
select category,sum(rental_price) 
from books
join issued_status
on issued_status.issued_book_isbn=books.isbn
group by category;

#7)List Members Who Registered in the Last 180 Days:
select member_name ,date_sub(reg_date,interval 180 day) as new_members
 from members
join issued_status
on issued_status.issued_member_id=members.member_id
group by member_name,reg_date;

#8)List Employees with Their Branch Manager's Name and their branch details:
select e1.emp_id,
e1.emp_name,
e1.branch_id,
b.manager_id,
e2.emp.name as manager
from employees e1
join branch b
on b.branch_id=e1.branch_id
join employees e2
on b.manager_id=e2.emp_id;

#9)Create a Table of Books with Rental Price Above a Certain Threshold 7USD:
create table books_price
as
select * from books
where rental_price>7;
#visualizing the table
Select * from book_price;

#10) Retrieve the List of Books Not Yet Returned

select issued_book_name 
from issued_status
left join return_status
on return_status.issued_id=issued_status.issued_id
where return_status.return_id IS NULL;

#11)Identify Members with Overdue Books
Write a query to identify members who have overdue books (assume a 30-day return period). 
Display the member's_id, member's name, book title, issue date, and days overdue.

select ist.issued_member_id,m.member_name,bk.book_title,ist.issued_date,
(CURRENT_DATE-ist.issued_date) as days_overdue 
from issued_status as ist
join members as m
on m.member_id=ist.issued_member_id
join books as bk
on  bk.isbn=ist.issued_book_isbn 
LEFT JOIN 
return_status as rs
ON rs.issued_id = ist.issued_id
WHERE 
    rs.return_date IS NULL
    AND
    (CURRENT_DATE - ist.issued_date) > 30
ORDER BY 1;






